{"version":3,"sources":["barcode.png","components/BarcodeQuagga.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","BarcodeQuagga","props","initialState","active","code","state","this","onClick","start","stop","console","log","self","setState","config","numOfWorkers","navigator","hardwareConcurrency","locate","inputStream","name","type","target","constraints","width","height","facingMode","area","top","right","left","bottom","decoder","readers","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","locator","halfSample","patchSize","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","JSON","stringify","Quagga","init","err","onDetected","handleDetected","bind","data","codeResult","beep","offDetected","Audio","play","React","Component","App","className","src","logo","alt","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,oNCY9BC,EAAb,kDAMI,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IANOC,aAAe,CAC5BC,QAAQ,EACRC,KAAM,MAON,EAAKC,MAAQ,EAAKH,aAJE,EAN5B,qDAac,IAAD,OACL,OACI,oCAEII,KAAKD,MAAMF,OAAS,KAChB,4BAAQI,QAAS,kBAAM,EAAKC,UACvB,kBAITF,KAAKD,MAAMF,OACP,4BAAQI,QAAS,kBAAM,EAAKE,SACvB,QACO,KAGhBH,KAAKD,MAAMD,KACP,oCACI,6BACA,6CAAeE,KAAKD,MAAMD,QAE5B,QAlCtB,8BAyCQM,QAAQC,IAAI,cACZ,IAAMC,EAAON,KAEbA,KAAKO,SAAL,2BAAkBP,KAAKD,OAAvB,IAA8BF,QAAQ,KAEtC,IAAMW,EAAS,CACXC,aAAcC,UAAUC,oBACxBC,QAAQ,EACRC,YAAa,CACTC,KAAM,OACNC,KAAM,aACNC,OAAQ,iBACRC,YAAa,CACTC,MAAO,IACPC,OAAQ,KACRC,WAAY,eAEhBC,KAAM,CACFC,IAAK,KACLC,MAAO,KACPC,KAAM,KACNC,OAAQ,OAGhBC,QAAS,CACLC,QAAS,CAAC,mBACVC,MAAO,CACHC,iBAAiB,EACjBC,eAAe,EACfC,cAAc,EACdC,aAAa,GAEjBC,UAAU,GAEdC,QAAS,CACLC,YAAY,EACZC,UAAW,QACXR,MAAO,CACPS,YAAY,EACZC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,EACZC,iBAAiB,EACjBC,0BAA0B,EAC1BC,eAAgB,CACZC,iBAAiB,EACjBC,oBAAoB,EACpBC,QAAQ,MAKpB3C,QAAQC,IAAR,kBAAuB2C,KAAKC,UAAUzC,KAEtC0C,IAAOC,KAAK3C,GAAQ,SAAS4C,GACrBA,EACAhD,QAAQC,IAAI+C,IAIhBhD,QAAQC,IAAI,2BACZ6C,IAAOG,WAAW/C,EAAKgD,eAAeC,KAAKjD,IAC3C4C,IAAOhD,cAxGnB,qCA4GmBsD,GACXpD,QAAQC,IAAR,yBAA8BmD,EAAKC,WAAW3D,OAC9CE,KAAKO,SAAL,2BAAkBP,KAAKD,OAAvB,IAA8BD,KAAM0D,EAAKC,WAAW3D,QACpDE,KAAK0D,SA/Gb,6BAoHQtD,QAAQC,IAAI,cACZL,KAAKO,SAAL,eAAkBP,KAAKJ,eAEvBsD,IAAOS,YAAY3D,KAAKsD,gBACxBJ,IAAO/C,SAxHf,6BA4HkB,IAAIyD,MAAM,0/HAChBC,WA7HZ,GAAmCC,IAAMC,W,gBCO1BC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOjD,OAAO,UACvD,6BACA,6BACA,yBAAKkD,GAAG,kBACR,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrE,WACrBA,UAAUsE,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlF,QAAQkF,MAAMA,EAAMC,c","file":"static/js/main.432d3586.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/barcode.111a5967.png\";","import React from 'react';\r\nimport Quagga from 'quagga'\r\n\r\n\r\ninterface BarcodeProps {\r\n}\r\n\r\ninterface BarcodeState {\r\n    active: boolean,\r\n    code: string | null\r\n}\r\n\r\nexport class BarcodeQuagga extends React.Component<BarcodeProps, BarcodeState> {\r\n    private readonly initialState = {\r\n        active: false,\r\n        code: null\r\n    };\r\n\r\n    constructor(props: any) {\r\n        super(props)\r\n        \r\n        // todo; lift state and use a params callback\r\n        this.state = this.initialState\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            {\r\n                this.state.active ? null :                 \r\n                    <button onClick={() => this.start()}>\r\n                        {\"Start (Quagga)\"}\r\n                    </button>\r\n            }\r\n            {\r\n                this.state.active ? \r\n                    <button onClick={() => this.stop()}>\r\n                        {\"Stop\"}\r\n                    </button> : null\r\n            }\r\n            {\r\n                this.state.code ? \r\n                    <>\r\n                        <br/>\r\n                        <div>{`Code: ${this.state.code}`}</div>\r\n                    </>  \r\n                    : null\r\n            }\r\n            </>\r\n        )\r\n    }\r\n\r\n    start() {\r\n        console.log(\"starting..\")\r\n        const self = this\r\n\r\n        this.setState({...this.state, active: true})\r\n\r\n        const config = {\r\n            numOfWorkers: navigator.hardwareConcurrency,\r\n            locate: true,\r\n            inputStream: {\r\n                name: \"Live\",\r\n                type: \"LiveStream\",\r\n                target: '#captureTarget',\r\n                constraints: {\r\n                    width: 240,\r\n                    height: 1280,\r\n                    facingMode: \"environment\"\r\n                },\r\n                area: {\r\n                    top: \"0%\",\r\n                    right: \"0%\",\r\n                    left: \"0%\",\r\n                    bottom: \"0%\" // bottom offset\r\n                },\r\n            },\r\n            decoder: {\r\n                readers: [\"code_128_reader\"],\r\n                debug: {\r\n                    drawBoundingBox: false,\r\n                    showFrequency: false,\r\n                    drawScanline: false,\r\n                    showPattern: false\r\n                },\r\n                multiple: false\r\n            },\r\n            locator: {\r\n                halfSample: true,\r\n                patchSize: \"large\", // x-small, small, medium, large, x-large\r\n                debug: {\r\n                showCanvas: false,\r\n                showPatches: false,\r\n                showFoundPatches: false,\r\n                showSkeleton: false,\r\n                showLabels: false,\r\n                showPatchLabels: false,\r\n                showRemainingPatchLabels: false,\r\n                boxFromPatches: {\r\n                    showTransformed: false,\r\n                    showTransformedBox: false,\r\n                    showBB: false\r\n                }\r\n                }\r\n            }\r\n        };\r\n        console.log(`config: ${JSON.stringify(config)}`)\r\n\r\n        Quagga.init(config, function(err: any) {\r\n            if (err) {\r\n                console.log(err);\r\n                return\r\n            }\r\n\r\n            console.log(\"initialization finished\");\r\n            Quagga.onDetected(self.handleDetected.bind(self));\r\n            Quagga.start();\r\n        });\r\n    }\r\n\r\n    handleDetected(data: any) {\r\n        console.log(`detected: code=${data.codeResult.code}`)\r\n        this.setState({...this.state, code: data.codeResult.code})\r\n        this.beep();\r\n    }\r\n\r\n    stop()\r\n    {\r\n        console.log(\"stopping..\")\r\n        this.setState({...this.initialState})\r\n\r\n        Quagga.offDetected(this.handleDetected);\r\n        Quagga.stop()\r\n    }\r\n\r\n    beep() {\r\n        var snd = new Audio(\"data:audio/wav;base64,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qJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");  \r\n        snd.play();\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {BarcodeQuagga} from './components/BarcodeQuagga'\r\nimport logo from './barcode.png'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" height=\"300px\" />\r\n        <br/>\r\n        <br/>\r\n        <div id='captureTarget' />\r\n        <BarcodeQuagga/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}